| fib(i32) |     |             |
|----------+-----+-------------|
| b0       | %0  | getArg [0]  |---\
|          | %1  | const 2     |   |
|          | %2  | less %0, %1 |   |
|          | %3  | if %2       |   |
|          | %4  | -> br b1    |   |
|          | %5  | -> br b2    |   |
|----------+-----+-------------|   |
| b1       | %6  | ret (%0)    |--/ \
|----------+-----+-------------|    |
| b2       | %7  | const 1     |    |
|          | %8  | sub %0, %7  |    |
|          | %9  | recur (%8)  |    |
|          | %10 | const 2     |    |
|          | %11 | sub %0, %10 |----/
|          | %12 | recur (%11) |
|          | %13 | add %9, %12 |
|          | %14 | ret (%13)   |
|----------+-----+-------------|
-> annotating last uses, aka. determining lifetimes
| fib(i32) |     |             |
|----------+-----+-------------|
| b0       | %0  | getArg [0]  |--\
|          | %1  | const 2     |  |
|          | ___ | once %1     |  |
|          | %2  | less %0, %1 |  |
|          | ___ | once %2     |  |
|          | %3  | if %2       |  |
|          | %4  | -> br b1    |  |
|          | %5  | -> br b2    |  |
|----------+-----+-------------|  |
| b1       | ___ | once %0     | / \
|          | %6  | ret (%0)    |/  |
|----------+-----+-------------|   |
| b2       | %7  | const 1     |   |
|          | ___ | once %7     |   |
|          | %8  | sub %0, %7  |   |
|          | ___ | once %8     |   |
|          | %9  | recur (%8)  |   |
|          | %10 | const 2     |   |
|          | ___ | once %0     |   /
|          | ___ | once %10    |  /
|          | %11 | sub %0, %10 |-/
|          | ___ | once %11    |
|          | %12 | recur (%11) |
|          | ___ | once %9     |
|          | ___ | once %12    |
|          | %13 | add %9, %12 |
|          | ___ | once %13    |
|          | %14 | ret (%13)   |
|----------+-----+-------------|
-> allocating to virtual registers, no reuse as we don't want to do the final allocation task without considering spilling
| fib(v0)  |     |             |
|----------+-----+-------------|
| b0       | v0  | getArg [0]  |--\
|          | v1  | const 2     |  |
|          | ___ | once v1     |  |
|          | v2  | less v0, v1 |  | NOTE: could reuse v1
|          | ___ | once v2     |  |
|          |     | if v2       |  |
|          |     | -> br b1    |  |
|          |     | -> br b2    |  |
|----------+-----+-------------|  |
| b1       | ___ | once v0     |-/ \
|          |     | ret (v0)    |   |
|----------+-----+-------------|   |
| b2       | v3  | const 1     |   | NOTE: could reuse v1
|          | v4  | copy v0     |   | sub has reuse but v0 lives on, resolve by copying and changing to v4
|          | ___ | once v3     |   |
|          | v4  | sub v4, v3  |   |
|          | ___ | once v4     |   |
|          | v5  | recur (v4)  |   | NOTE: could reuse v4
|          | v6  | const 2     |   |
|          | ___ | once v0     |   |
|          | ___ | once v6     |   |
|          | v0  | sub v0, v6  |   | NOTE: sub has reuse and v0 ends here, so realloc to it
|          | ___ | once v0     |   |
|          | v7  | recur (v0)  |---/ NOTE: could reuse v0 or v6 or whatever
|          | ___ | once v5     |
|          | ___ | once v7     |
|          | v5  | add v5, v7  | NOTE: add has reuse and v5 ends here, so realloc it
|          | ___ | once v5     |
|          |     | ret (v5)    |
|----------+-----+-------------|
-> allocate to real registers and consider spilling
| fib(v0) |     |             |   |  m1  r0  r1
|---------+-----+-------------+---|      
| b0      | v0  | getArg [0]  |r0 |     +v0
|         | v1  | const 2     |r1 |      |  +v1
|         | ___ | once v1     |   |      |   |
|         | v2  | less v0, v1 |r1 |      |  +v2
|         | ___ | once v2     |   |      |   |
|         |     | if v2       |   |      |   x
|         |     | -> br b1    |   |      |   
|         |     | -> br b2    |   |      |   
|---------+-----+-------------+---|      |\  
| b1      | ___ | once v0     |   |      x|  
|         |     | ret (v0)    |   |       |  
|---------+-----+-------------+---|      /   
| b2      | v3  | const 1     |r1 |      |  +v3
|         | v4  | copy v0     |m1 | +v0-+v4  |  NOTE: we spill v0 to the stack rather than v4, as the steps to next use is higher, also r0 just happens to have highest steps to next use
|         | ___ | once v3     |   |  |   |   |
|         | v4  | sub v4, v3  |   |  |   |   x
|         | ___ | once v4     |   |  |   |
|         | v5  | recur (v4)  |   |  |  +v5
|         | v6  | const 2     |   |  |   |  +v6
|         | ___ | once v0     |r0 | +v5-+v0  |  NOTE: we spill v5 to the stack to allow use of v0 and v5 has highest steps to next use
|         | ___ | once v6     |   |  |   |   |
|         | v0  | sub v0, v6  |   |  |   |   x
|         | ___ | once v0     |   |  |   |
|         | v7  | recur (v0)  |   |  |  +v7
|         | ___ | once v5     |   |  x-- | -+v5 NOTE: we unspill v5 as a register is free
|         | ___ | once v7     |   |      |   |
|         | v5  | add v5, v7  |   |      x   |
|         | ___ | once v5     |   |          x
|         |     | ret (v5)    |   |
|---------+-----+-------------+---|
